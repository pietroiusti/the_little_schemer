* Toys
- The Law of Car :: 
  The primitive ~car~ is defined only for non-empty lists.

(In Emacs Lisp and Common Lisp ~(car '())~ returns ~nil~. Moreover, it
can be applied to cons cells too, not only to lists.)

- The Law of Cdr ::
  The primitive cdr is defined only for non-empty lists. The ~cdr~ or
  any non-empty list is always another list.

 (In Emacs Lisp and Common Lisp ~(cdr '())~ returns ~nil~. Moreover, it
can be applied to cons cells too, not only to lists.)

- The Law of Cons ::
  The primitive ~cons~ is defined only for non-empty lists. The second
  argument to ~cons~ must be a list. The result is a list.

(Actually, cons can be use with non-lists too, but here need not care
about that...)
- The Law of Null? ::
  The primitive ~null?~ is defined only for lists.

(In Emacs Lisp we have ~null~.)
- atom? ::
  ~atom~ takes an S-expression and returns t if it's an atom (that is,
  if it's not a list), nil otherwise:
  #+begin_src emacs-lisp
    (defun atom? (x)
      (not (listp x)))
  #+end_src

(In elisp there is a bult-in ~atom~ function, but it returns ~t~ also
when given ~nil~.)

- The Law of Eq ::
  The primitive ~eq?~ takes two arguments. Each must be a non-numeric
  atom.

(In elisp we have ~eq~...)
* Do It, Do It Again, and Again, and Again...
** lat?
~lat?~ tells us whether a list is a list of atoms (that is, a list
that does not have lists as members, given that atom = non-list).
#+begin_src emacs-lisp
  (defun lat? (l)
    (cond
     ((null l) t)
     ((atom? (car l)) (lat? (cdr l)))
     (t nil)))
#+end_src

~cond~ is a way to ask several questions in order. If the answer to a
question is yes, then we return the following S-expression. If it's
false, then we ask the next question.

~lat?~, using ~cond~, first asks whether the list is empty. If the
list is empty, then it returns ~t~. If it's not empty, then ~lat?~
asks the next question. The next question asks whether the first
member of the list is an atom. If it is an atom, then we recur passing
the cdr of the list. If it's not an atom, then we return ~nil~,
because the list is not a list of atoms. If all the member of the list
are atoms, we recur till when we pass the empty list as the argument
for ~lat?~.

** member?
~member~ tells us whether a certain list of atoms contains a certain
atom as one of its member.
#+begin_src emacs-lisp
  (defun member? (a lat)
    (cond
     ((null lat) nil)
     (t (or (eq (car lat) a)
               (member? a (cdr lat))))))
#+end_src
~member?~, like ~lat~, first asks whether ~lat~ is empty. If ~lat~ is
empty, then it returns ~nil~. If it's not, then we evaluate an ~or~
expression. If the first element of ~lat~ is ~a~, then the or
expression returns ~t~, otherwise we recur on the cdr.

*** member? in JavaScript?
This is the way I would write it:
#+begin_src javascript
  let member = (a, lat) => {
    if (lat.length == 0)
      return false;
    else
      if (lat[0] === a)
        return t;
      else
        return member(a, lat.slice(1, lat.length));
  };
#+end_src
Not as elegant as the lisp version...
** The First Commandment (preliminary)
Always ask ~null?~ as the first question in expressing any function.

* Cons the Magnificent
** The Second Commandment
Use ~cons~ to build lists.

** rember
~rember~ removes the first occurrence of an atom from a list of atoms.
#+begin_src emacs-lisp
  (defun rember (a lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq a (car lat) (cdr lat)))
         (t (cons (car lat)
                  (rember a (cdr lat))))))))
#+end_src

This can be simplified:
#+begin_src emacs-lisp
  (defun rember (a lat)
    (cond
     ((null lat) '())
     ((eq a (car lat)) (cdr lat))
     (t (cons (car lat)
              (rember a (cdr lat))))))
#+end_src

The authors say that they don't simplify it right away, ``because then
a function's structure does not coincide with its argument's
structure.'' I found that statement a bit cryptic. [[https://stackoverflow.com/questions/31736044/the-little-schemer-what-is-a-function-or-arguments-structure?rq=1][I'm not alone]].

** The Third Commandment
When building a list, describe the first typical element, and then
~cons~ it onto the natural recursion.

** firsts
~firsts~ takes either an empty lists of a lists of non-empty lists. In
the former case it returns nil, in the latter it returns a list with
the first elements of each internal list.
#+begin_src emacs-lisp
  (defun firsts (l)
    (cond
     ((null l) '())
     (t (cons (car (car l))
              (firsts (cdr l))))))
#+end_src

** insertR
~insertR~ insert ~new~ after the first occurence of ~old~ in ~lat~.
#+begin_src emacs-lisp
  (defun insertR (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons (car lat)
                (cons new (cdr lat))))
         (t (cons (car lat) (insertR new old (cdr lat))))))))
#+end_src
This could be simplified, in the same way rember has been simplified
above... Same for the fuctions that follows that have the same
structure as rember.
** insertL
~insertR~ insert ~new~ before the first occurence of ~old~ in ~lat~.
#+begin_src emacs-lisp
  (defun insertL (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new (cons old (cdr lat))))
         (t (cons (car lat) (insertL new old (cdr lat))))))))
#+end_src
Given that ~(cons (car foo) (cdr foo))~ is nothing more than ~foo~, we
could have said:
#+begin_src emacs-lisp
  (defun insertL (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old) (cons new lat))
         (t (cons (car lat) (insertL new old (cdr lat))))))))
#+end_src
** subst
~subst~ replaces the first occurrences of ~old~ in ~lat~ with ~new~.
#+begin_src emacs-lisp
  (defun subst (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new (cdr lat)))
         (t (cons (car lat)
                  (subst new old
                         (cdr lat))))))))
#+end_src
** subst2
#+begin_src emacs-lisp
  (defun subst2 (new o1 o2 lat)
    (cond
     ((null lat) '())
     (t (cond
         ((or (eq (car lat) o1)
              (eq (car lat) o2))
          (cons new (cdr lat)))
         (t (cons (car lat)
                  (subst2 new o1 o2
                         (cdr lat))))))))
#+end_src
** multirember
#+begin_src emacs-lisp
  (defun multirember (a lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) a)
          (multirember a (cdr lat)))
         (t (cons (car lat)
                  (multirember a (cdr lat))))))))
#+end_src
** multiinsertR
#+begin_src emacs-lisp
  (defun multiinsertR (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons old
                (cons new
                      (multiinsertR new old (cdr lat)))))
         (t (cons (car lat) (multiinsertR new old (cdr lat))))))))
#+end_src
** multiinsertL
#+begin_src emacs-lisp
  (defun multiinsertL (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new
                (cons old
                      (multiinsertL new old (cdr lat)))))
         (t (cons (car lat)
                  (multiinsertL new old (cdr lat))))))))
#+end_src
** The Fourth Commandment (preliminary)
Always change at least one argument while recurring. It must be
changed to be closer to termination. The changing argument must be
tested in the termination condition:

when using ~cdr~, test termination with ~null?~.
** multisubst
#+begin_src emacs-lisp
  (defun multisubst (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new 
                (multisubst new old (cdr lat))))
         (t (cons (car lat)
                  (multisubst new old (cdr lat))))))))
#+end_src
* Numbers Games
** +
#+begin_src emacs-lisp
  (defun + (n m)
    (cond
     ((zerop m) n)
     (t (1+ (plus n (1- m))))))
#+end_src

A possible alternative:
#+begin_src emacs-lisp
  (defun + (n m)
    (cond
     ((zerop m) n)
     (t (plus (1+ n) (1- m)))))
#+end_src
** -
#+begin_src emacs-lisp
  (defun - (n m)
    (cond
     ((zerop m) n)
     (t (1- (minus n (1- m))))))
#+end_src
** The First Commandment (first revision) 
When recurring on a list of atoms, ~lat~, ask two questions about it:
~(null lat)~ and ~t~.

When recurring on a number, ~n~, ask two questions about it: ~(zerop
n)~ and ~t~.
** addtup
#+begin_src emacs-lisp
  (defun addtup (tup)
    (cond
     ((null tup) 0)
     (t (+ (car tup) (addtup (cdr tup))))))
#+end_src
** The Fourth Commandment (first revision)
Always change at least one argument while recurring. It must be
changed to be closer to termination. The changing argument must be
tested in the termination condition:

when using ~cdr~, test termination with ~null~ and when using ~1-~ ,
test termination with ~zerop~.
** X
#+begin_src emacs-lisp
  (defun × (n m)
    (cond
     ((zerop m) 0)
     (t (+ n (× n (1- m))))))
#+end_src
** The Fifth Commandment
When building a value with ~+~, always use 0 for the value of the
terminating line, for adding 0 does not change the value of an
addition.

When building a value with ~×~, always use 1 for the value of the
terminating line, for multipling by 1 does not change the value of a
multiplication.

When building a value with ~cons~, always consider ~()~ for the value
of the terminating line.
** tup+
#+begin_src emacs-lisp
  (defun tup+ (tup1 tup2)
    (cond
     ((and (null tup1) (null tup2)) '())
     (t (cons (+ (car tup1) (car tup2))
              (tup+ (cdr tup1) (cdr tup2))))))
#+end_src

Let's make it work with tups of different lengths
#+begin_src emacs-lisp
  (defun tup+ (tup1 tup2)
    (cond
     ((null tup1) tup2)
     ((null tup2) tup1)
     (t (cons
         (+ (car tup1) (car tup2))
         (tup+ (cdr tup1) (cdr tup2))))))
#+end_src
** >
#+begin_src emacs-lisp
  (defun > (n m)
    (cond
     ((zerop n) nil)
     ((zerop m) t)
     (t (> (1- n) (1- m)))))
#+end_src
** <
#+begin_src emacs-lisp
  (defun < (n m)
    (cond
     ((zerop m) nil)
     ((zerop n) t)
     (t (< (1- n) (1- m)))))
#+end_src
** =
#+begin_src emacs-lisp
  (defun = (n m)
    (cond
     ((zerop m) (zerop n))
     ((zerp n) nil)
     (t (= (1- n) (1- m)))))
#+end_src

Using ~greater-than~ and ~less-than~:
#+begin_src emacs-lisp
  (defun equal-to (n m)
    (cond
     ((> n m) nil)
     ((< n m) nil)
     (t t)))
#+end_src
** ↑
#+begin_src emacs-lisp
  (defun ↑ (n m)
      (cond
       ((zerop m) 1)
       ((× n (↑ n (1- m))))))
#+end_src
** ÷
#+begin_src emacs-lisp
  (defun ÷ (n m)
    (cond
     ((< n m) 0)
     (t (1+ (÷ (- n m) m)))))
#+end_src
** length
#+begin_src emacs-lisp
  (defun length (lat)
    (cond
     ((null lat) 0)
     (t (1+ (length (cdr lat))))))
#+end_src
** pick
#+begin_src emacs-lisp
  (defun pick (n lat)
    (cond
     ((zerop (1- n)) (car lat))
     (t (pick (1- n) (cdr lat)))))
#+end_src
** rempick
#+begin_src emacs-lisp
  (defun rempick (n lat)
    (cond
     ((eq n 1) (cdr lat))
     (t (cons (car lat) (rempick (1- n) (cdr lat))))))
#+end_src
** no-nums
#+begin_src emacs-lisp
  (defun no-nums (lat)
    (cond
     ((null lat) '())
     (t (cond
         ((numberp (car lat)) (no-nums (cdr lat)))
         (t (cons (car lat) (no-nums (cdr lat))))))))
#+end_src
** all-nums
#+begin_src emacs-lisp
  (defun all-nums (lat)
    (cond
     ((null lat) '())
     (t (cond
         ((numberp (car lat))
          (cons (car lat)
                (all-nums (cdr lat))))
         (t (all-nums (cdr lat)))))))
#+end_src
** eqan?
#+begin_src emacs-lisp
  (defun eqan? (a1 a2)
    (cond
     ((and (numberp a1) (numberp a2))
      (= a1 a2))
     ((or (numberp a1) (numberp a2))
      nil)
     (t (eq a1 a2))))
#+end_src
** occur
#+begin_src emacs-lisp
  (defun occur (a lat)
    (cond
     ((null lat) 0)
     (t (cond
         ((eq (car lat) a)
          (1+ (occur a (cdr lat))))
         (t (occur a (cdr lat)))))))
#+end_src
** one?
#+begin_src emacs-lisp
  (defun one? (n)
    (eq 1 n))
#+end_src
** rempick (using ~one?~)
#+begin_src emacs-lisp
  (defun rempick (n lat)
    (cond
     ((one? n) (cdr lat))
     (t (cons (car lat)
              (rempick (1- n)
                       (cdr lat))))))
#+end_src
* Oh My Gawd: It's Full of Stars
** rember*
#+begin_src emacs-lisp
  (defun rember* (a l)
    (cond
     ((null l) '())
     ((atom? (car l))
      (cond
       ((eq (car l) a)
        (rember* a (cdr l)))
       (t (cons (car l)
                (rember* a (cdr l))))))
     (t (cons (rember* a (car l))
              (rember* a (cdr l))))))
#+end_src

** insertR*
#+begin_src emacs-lisp
  (defun insertR* (new old l)
    (cond
     ((null l) '())
     ((atom? (car l)
             (cond
              ((eq (car l) old)
               (cons old
                     (cons new
                           (insertR* new old (cdr l)))))
              (t (cons (car l)
                       (insertR* new old (cdr l)))))))
     (t (cons
         (insertR* new old (car l))
         (insertR* new old (cdr l))))))
#+end_src
** The First Commandment (final version)
When recurring on a list of atoms, ~lat~, ask two questions about it:
~(null? lat)~ and else.

When recurring on a number, ~n~, ask two questions about it: ~(zero?
n)~ and else.

When recurring on a list of S-expressions, ~l~, ask three questions
about it: ~(null l)~, ~(atom? (car l))~, and else.
** The Fourth Commandment (final version)
Always change at least one argument while recurring. When recurring on
a list of atoms, ~lat~, use ~(cdr lat)~. When recurring on a number,
~n~, use ~(1- n)~. And when recurring on a list of S-expressions, ~l~,
use ~(car l)~ and ~(cdr l)~ if neither ~(null? l)~ nor ~(atom?  (car
l))~ are true.

It must be changed to be closer to termination. The changing argument
must be tested in the termination condition:

when using ~cdr~, test termination with ~null?~ and when using ~1-~ ,
test termination with ~zerop~.
** occur*
#+begin_src emacs-lisp
  (defun occur* (a l)
    (cond
     ((null l) 0)
     ((atom? (car l))
      (cond
       ((eq (car l) a)
        (1+ (occur* a (cdr l))))
       (t (occur* a (cdr l)))))
     (t (+ (occur* a (car l))
           (occur* a (cdr l))))))
#+end_src
** subst*
#+begin_src emacs-lisp
  (defun subst* (new old l)
    (cond
     ((null l) '())
     ((atom (car l))
      (cond
       ((eq (car l) old)
        (cons new (subst* new old (cdr l))))
       (t (cons (car l) (subst* new old (cdr l))))))
     (t (cons (subst* new old (car l))
              (subst* new old (cdr l))))))
#+end_src
** insertL*
#+begin_src emacs-lisp
  (defun insertL* (new old l)
    (cond
     ((null l) '())
     ((atom? (car l))
      (cond
       ((eq (car l) old)
        (cons new
              (cons old
                    (insertL* new old (cdr l)))))
       (t (cons (car l)
                (insertL* new old
                          (cdr l))))))
     (t (cons (insertL* new old (car l))
              (insertL* new old (cdr l))))))
#+end_src
** member*
#+begin_src emacs-lisp
  (defun member* (a l)
    (cond
     ((null l) nil)
     ((atom (car l)) (or (eq? (car l) a)
                         (member* a (cdr l))))
     (t (or (member* a (car l))
            (member* a (cdr l))))))
#+end_src
** leftmost
#+begin_src emacs-lisp
  (defun leftmost (l)
    (cond
     ((atom? (car l)) (car l))
     (t (leftmost (car l)))))
#+end_src
** eqlist?
#+begin_src emacs-lisp
  (defun eqlist? (l1 l2)
    (cond
     ((and (null l1) (null? l2)) t)
     ((and (null l1) (atom? (car l2))) nil)
     ((null? l1) nil)
     ((and (atom? (car l1)) (null l2)) nil)
     ((and (atom? (car l1) (atom? (car l2))))
      (and (eqan? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2)))) ;; do some shit
     ((atom? (car l1)) nil)
     ((null l2) nil)
     ((atom? (car l2)) nil)
     (t
      (and (eqlist? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2))))))
#+end_src

Simplifying:
#+begin_src emacs-lisp
  (defun eqlist? (l1 l2)
    (cond
     ((and (null l1) (null l2)) t)
     ((or (null l1) (null l2)) nil)
     ((and (atom? (car l1) (atom? (car l2))))
      (and (eqan? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2)))) ;; do some shit
     ((or (atom? (car l1) (car l2))) nil)
     (t
      (and (eqlist? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2))))))
#+end_src
** equal?
#+begin_src emacs-lisp
  (defun equal? (s1 s2)
    (cond
     ((and (atom? s1) (atom? s2))
      (eqan? s1 s2))
     ((atom? s1) nil)
     ((atom? s2) nil)
     (t (eqlist? s1 s2))))
#+end_src

Simplifying:
#+begin_src emacs-lisp
  (defun equal? (s1 s2)
    (cond
     ((and (atom? s1) (atom? s2))
      (eqan? s1 s2))
     ((or (atom? s1) (atom? s2)) nil)
     (t (eqlist? s1 s2))))
#+end_src
** eqlist? (using equal?)
#+begin_src emacs-lisp
  (defun eqlist? (l1 l2)
    (cond
     ((and (null l1) (null l2)) t)
     ((or (null l1) (null l2)) nil)
     (t
      (and (equal? (car l1) (car l2))
           (eqlist? (cdr l1) (cdr l2))))))
#+end_src
** The Sixth Commandment
Simplify only after the function is correct.
** rember (for l instead of lat)
#+begin_src emacs-lisp
  (defun rember (s l)
    (cond
     ((null l) '())
     ((equal? (car l) s) (cdr l))
     (t (cons (car l)
              (rember s (cdr l))))))
#+end_src
* Shadows
** numbered?
~numbered?~ tells whether an arithmetic expression is made only by
numbers, besides +, ×, and ↑.

#+begin_src emacs-lisp
  (defun numbered? (aexp)
    (cond
     ((atom? (car aexp)) (number? (car aexp)))
     ((eq (car (cdr aexp) '+))
      (and (numbered? (car aexp))
           (numbered? (car (cdr (cdr aexp))))))
     ((eq (car (cdr aexp) '×))
      (and (numbered? (car aexp))
           (numbered? (car (cdr (cdr aexp))))))
     ((eq (car (cdr aexp) '↑))
      (and (numbered? (car aexp))
           (numbered? (car (cdr (cdr aexp))))))))
#+end_src

Given that aexp is an arithmetic expression, we know that if it's not
an atom, then the car of the cdr of aexp must be either + or × or
↑. So we can write ~numbered?~ in a simpler way:
#+begin_src emacs-lisp
  (defun numbered? (aexp)
    (cond
     ((atom? aexp) (number? aexp))
     (t
      (and (numbered? (car aexp))
           (numbered?
           (car (cdr (cdr aexp))))))))
#+end_src
** The Seventh Commandment
Recur on the /subparts/ that are of the same nature:
- On the sublists of a list.
- On the subexpressions of an arithmetic expression.
** value
~value~ gives you the value of an arithmetic expression. For example
the value of the expression (+ 1 2) is 3. We'll use some help
function.
#+begin_src emacs-lisp
  (defun 1st-sub-exp (aexp)
    (car (cdr aexp)))

  (defun 2nd-sub-exp (aexp)
    (car (cdr (cdr aexp))))

  (defun operator (aexp)
    (car aexp))

  (defun value (nexp)
    (cond
     ((atom? (nextp)) nexp)
     ((eq (operator nexp) '+)
      (+ (value (1st-sub-exp nexp))
         (value (2nd-sub-exp nexp))))
     ((eq (operator nexp) '×)
      (× (value (1st-sub-exp nexp))
         (value (2nd-sub-exp nexp))))
     (t (↑ (value (1st-sub-exp nexp))
         (value (2nd-sub-exp nexp))))))
#+end_src
** The Eight Commandment
Use help functions to abstract from representations.
* Friends and Relations
** setp
#+begin_src emacs-lisp
  (defun setp (lat)
    (cond
     ((null lat) t)
     ((memberp (car lat) (cdr lat)) nil)
     (t (setp (cdr lat)))))
#+end_src
** makeset
#+begin_src emacs-lisp
  (defun makeset (lat)
    (cond
     ((null lat) '())
     ((memberp (car lat) (cdr lat))
      (makeset (cdr lat)))
     (t (cons (car lat)
              (makeset (cdr lat))))))
#+end_src

Using ~multiremember~:
#+begin_src emacs-lisp
  (defun makeset (lat)
      (cond
       ((null lat) '())
       (t (cons (car lat)
                (makeset multiremember
                         (car lat)
                         (cdr lat))))))
#+end_src
* Lambda the Ultimate
** rember-f
#+begin_src emacs-lisp
  (defun rember-f (testp a l)
    (cond
     ((null l) '())
     ((funcall testp (car l) a) (cdr l))
     (t (cons (car l) (rember-f testp a (cdr l))))))
#+end_src
#+begin_src emacs-lisp
  (defun rember-f (testp)
    (lambda (a l)
      (cond
       ((null l) '())
       ((funcall testp (car l) a) (cdr l))
       (t (cons (car l) (funcall (rember-f testp) a (cdr l)))))))
#+end_src
** insertL-f
#+begin_src emacs-lisp
  (defun insertL-f (testp)
    (lambda (new old l)
      (cond
       ((null l) '())
       ((funcall testp (car l) old)
        (cons new (cons old (cdr l))))
       (t (cons (car l) (funcall (insertL-f testp) new old (cdr l)))))))
#+end_src
#+begin_src emacs-lisp
  (funcall (insertL-f 'eq) 10 5 '(1 2 5 9))
#+end_src
** insertR-f
#+begin_src emacs-lisp
  (defun insertR-f (testp)
    (lambda (new old l)
      (cond
       ((null l) '())
       ((funcall testp (car l) old )
        (cons (car l) (cons new (cdr l))))
       (t (cons (car l) (funcall (insertR-f testp) new old (cdr l)))))))
#+end_src
#+begin_src emacs-lisp
  (funcall (insertR-f 'eq) 10 5 '(1 2 5 9))
#+end_src
** insert-g
#+begin_src emacs-lisp
  (defun seqL (new old l)
    (cons new
          (cons old l)))

  (defun seqR (new old l)
    (cons old
          (cons new l)))
#+end_src
#+begin_src emacs-lisp
  (defun insert-g (seq)
    (lambda (new old l)
      (cond
       ((null l) '())
       ((eq (car l) old)
        (funcall seq new old (cdr l)))
       (t (cons (car l)
                (funcall (insert-g seq) new old (cdr l)))))))
#+end_src
Let's define ~insertL~ and ~insert-R~ using ~insert-g~:
#+begin_src emacs-lisp
  (setq insertL (insert-g (function seqL)))

  (setq insertR (insert-g (function seqR)))
#+end_src

Let's define ~insertL~ using ~insert-g~ without passing ~seqL~:
#+begin_src emacs-lisp
  (setq insertL (insert-g
                 (lambda (new old l)
                   (cons new
                         (cons old l)))))
#+end_src

Let's define subst using insert-g

#+begin_src emacs-lisp
  (defun seqS (new old l)
    (cons new l))

  (setq subst (insert-g (function seqS)))
#+end_src

Surprise, surprise, this is rember:
#+begin_src emacs-lisp
  (defun yyy (a l)
    (funcall (insert-g
              (lambda (new old l)
                l)) nil a l))
#+end_src
** The Ninth Commandment
#+begin_quote
Abstract common patterns with a new function.
#+end_quote
