* Toys
** The Law of Car
*The primitive ~car~ is defined only for non-empty lists.*

(In Emacs Lisp and Common Lisp ~(car '())~ returns ~nil~.)
** The Law of Cdr
*The primitive ~cdr~ is defined only for non-empty lists. The ~cdr~ or
 any non-empty list is always another list*.

 (In Emacs Lisp and Common Lisp ~(cdr '())~ returns ~nil~.)

** The Law of Cons
*The primitive ~cons~ is defined only for non-empty lists. The second
argument to ~cons~ must be a list. The result is a list.*

** The Law of Null?
*The primitive ~null?~ is defined only for lists.*

(In Emacs Lisp we use ~null~.)
** atom?
~atom~ takes an S-expression and returns t if it's an atom (that is,
if it's not a list), nil otherwise
#+begin_src emacs-lisp
  (defun atom? (x)
    (not (listp x)))
#+end_src

(In elisp there is a bult-in ~atom~ function, but it returns ~t~ also
when given ~nil~.)
** The Law of Eq?
*The primitive ~eq?~ takes two arguments. Each must be a non-numeric
atom.*
* Do It, Do It Again, and Again, and Again...
** lat?
~lat?~ tells us whether a list is a list of atoms (more precisely: a
list that does not have lists as members).
#+begin_src emacs-lisp
  (defun lat? (l)
    (cond
     ((null l) t)
     ((atom? (car l)) (lat? (cdr l)))
     (t nil)))
#+end_src

~cond~ is a way to ask several questions in order. If the answer to a
question is yes, then we return the following S-expression. If it's
false, then we ask the next question.

~lat?~, using ~cond~, first asks whether the list is empty. If the
list is empty, then it returns ~t~. If it's not empty, then ~lat?~
asks the next question. The next question asks whether the first
member of the list is an atom. If it is an atom, then we recur passing
the cdr of the list. If it's not an atom, then we return ~nil~,
because the list is not a list of atoms. If all the member of the list
are atoms, we recur till when we pass the empty list as the argument
for ~lat?~.

** member?
~member~ tells us whether a certain list of atoms contains a certain
atom as one of its member.
#+begin_src emacs-lisp
  (defun member? (a lat)
    (cond
     ((null lat) nil)
     (t (or (eq (car lat) a)
               (member? a (cdr lat))))))
#+end_src
~member?~, like ~lat~, first asks whether ~lat~ is empty. If ~lat~ is
empty, then it returns ~nil~. If it's not we evaluate an ~or~
expression. If the first element of ~lat~ is ~a~, then the or
expression returns ~t~.

*** In js?
#+begin_src javascript
  let member = (a, lat) => {
    if (lat.length == 0)
      return false;
    else
      if (lat[0] === a)
        return t;
      else
        return member(a, lat.slice(1, lat.length));
  };
#+end_src

** The First Commandment (preliminary)
Always ask ~null?~ as the first question in expressing any function.

* Cons the Magnificent
** rember
~rember~ removes the first occurrence of an atom from a list of atoms.
#+begin_src emacs-lisp
  (defun rember (a lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq a (car lat) (cdr lat)))
         (t (cons (car lat) (rember (cdr lat))))))))
#+end_src

This can be simplified:
#+begin_src emacs-lisp
  (defun rember (a lat)
    (cond
     ((null lat) '())
     ((eq a (car lat)) (cdr lat))
     (t (cons (car lat) (rember a (cdr lat))))))
#+end_src
** The Second Commandment
Use ~cons~ to build lists.

** firsts
~firsts~ takes either an empty lists of a lists of non-empty lists. In
the former case it returns nil, in the latter it returns a list with
the first elements of each internal list.
#+begin_src emacs-lisp
(defun firsts (l)
  (cond
   ((null l) '())
   (t (cons (car (car l)) (firsts (cdr l))))))
#+end_src

** The Third Commandment
When building a list, describe the first typical element, and then
~cons~ it onto the natural recursion.

** insertR
#+begin_src emacs-lisp
  (defun insertR (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons (car lat)
                (cons new (cdr lat))))
         (t (cons (car lat) (insertR new old (cdr lat))))))))
#+end_src
** insertL
#+begin_src emacs-lisp
  (defun insertL (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old) (cons new lat))
         (t (cons (car lat) (insertL new old (cdr lat))))))))
#+end_src

** subst
#+begin_src emacs-lisp
  (defun subst (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new (cdr lat)))
         (t (cons (car lat)
                  (subst new old
                         (cdr lat))))))))
#+end_src

** subst2
#+begin_src emacs-lisp
  (defun subst2 (new o1 o2 lat)
    (cond
     ((null lat) '())
     (t (cond
         ((or (eq (car lat) o1)
              (eq (car lat) o2))
          (cons new (cdr lat)))
         (t (cons (car lat)
                  (subst new o1 o2
                         (cdr lat))))))))
#+end_src

** multirember
#+begin_src emacs-lisp
  (defun multirember (a lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) a)
          (multirember a (cdr lat)))
         (t (cons (car lat)
                  (multirember a (cdr lat))))))))
#+end_src
** multiinsertR
#+begin_src emacs-lisp
  (defun multiinsertR (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons old
                (cons new
                      (multiinsertR new old (cdr lat)))))
         (t (cons (car lat) (multiinsertR new old (cdr lat))))))))
#+end_src

** multiinsertL
#+begin_src emacs-lisp
  (defun multiinsertL (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new
                (cons old
                      (multiinsertL new old (cdr lat)))))
         (t (cons (car lat)
                  (multiinsertL new old (cdr lat))))))))
#+end_src

** The Fourth Commandment (preliminary)
Always change at least one argument while recurring. It must be
changed to be closer to termination. The changing argument must be
tested in the termination condition:

when using ~cdr~, test termination with ~null?~.

** multisubst
#+begin_src emacs-lisp
  (defun multisubst (new old lat)
    (cond
     ((null lat) '())
     (t (cond
         ((eq (car lat) old)
          (cons new 
                (multisubst new old (cdr lat))))
         (t (cons (car lat)
                  (multisubst new old (cdr lat))))))))
#+end_src

* Numbers Games
** +
#+begin_src emacs-lisp
  (defun plus (n m)
    (cond
     ((zerop m) n)
     (t (1+ (plus n (1- m))))))
#+end_src

Our use of ~zerop~ is analogous to our previous uses of ~null~.
Our use of ~1+~ is analogous to our previous uses of ~cons~.

*** alternative
#+begin_src emacs-lisp
  (defun plus (n m)
    (cond
     ((zerop m) n)
     (t (plus (1+ n) (1- m)))))
#+end_src
** -
#+begin_src emacs-lisp
  (defun minus (n m)
    (cond
     ((zerop m) n)
     (t (1- (minus n (1- m))))))
#+end_src
** The First Commandment (first revision) 
When recurring on a list of atoms, ~lat~, ask two questions about it:
~(null lat)~ and ~t~.

When recurring on a number, ~n~, ask two questions about it: ~(zerop
n)~ and ~t~.
** addtup
#+begin_src emacs-lisp
  (defun addtup (tup)
    (cond
     ((null tup) 0)
     (t (+ (car tup) (addtup (cdr tup))))))
#+end_src
** The Fourth Commandment (first revision)
** X
#+begin_src emacs-lisp
  (defun times (a b)
    (cond
     ((zerop b) 0)
     (t (plus a (times a (1- b))))))
#+end_src
** tup+
#+begin_src emacs-lisp
  (defun tup+ (tup1 tup2)
    (cond
     ((and (null tup1) (null tup2)) '())
     (t (cons (+ (car tup1) (car tup2))
              (tup+ (cdr tup1) (cdr tup2))))))
#+end_src

Let's make it work with tups of different lengths
#+begin_src emacs-lisp
  (defun tup+ (tup1 tup2)
    (cond
     ((null tup1) tup2)
     ((null tup2) tup1)
     (t (cons
         (+ (car tup1) (car tup2))
         (tup+ (cdr tup1) (cdr tup2))))))
#+end_src
** >
#+begin_src emacs-lisp
  (defun greater-than (n m)
    (cond
     ((zerop n) nil)
     ((zerop m) t)
     (t (greater-than (1- n) (1- m)))))
#+end_src
** <
#+begin_src emacs-lisp
  (defun less-than (n m)
    (cond
     ((zerop m) nil)
     ((zerop n) t)
     (t (less-than (1- n) (1- m)))))
#+end_src
** =
#+begin_src emacs-lisp
  (defun equal-to (n m)
    (cond
     ((zerop m) (zerop n))
     ((zerp n) nil)
     (t (equal-to (1- n) (1- m)))))
#+end_src

Using ~greater-than~ and ~less-than~:
#+begin_src emacs-lisp
  (defun equal-to (n m)
    (cond
     ((greater-than n m) nil)
     ((less-than n m) nil)
     (t t)))
#+end_src
** ↑
#+begin_src emacs-lisp
  (defun ↑ (n m)
      (cond
       ((zerop m) 1)
       ((times n (↑ n (1- m))))))
#+end_src
** ÷
#+begin_src emacs-lisp
  (defun ÷ (n m)
    (cond
     ((< n m) 0)
     (t (1+ (÷ (- n m) m)))))
#+end_src

** length
#+begin_src emacs-lisp
  (defun ls-length (lat)
    (cond
     ((null lat) 0)
     (t (1+ (ls-length (cdr lat))))))
#+end_src

** pick
#+begin_src emacs-lisp
  (defun pick (n lat)
    (cond
     ((zerop (1- n)) (car lat))
     (t (pick (1- n) (cdr lat)))))

  ;; my slighlty different solution:
  (defun pick (n lat)
    (cond
     ((eq 1 n) (car lat))
     (t (pick (1- n) (cdr lat)))))
#+end_src

** rempick
#+begin_src emacs-lisp
  (defun rempick (n lat)
    (cond
     ((eq n 1) (cdr lat))
     (t (cons (car lat) (rempick (1- n) (cdr lat))))))
#+end_src

** no-nums
#+begin_src emacs-lisp
  (defun no-nums (lat)
    (cond
     ((null lat) '())
     (t (cond
         ((numberp (car lat)) (no-nums (cdr lat)))
         (t (cons (car lat) (no-nums (cdr lat))))))))
#+end_src

** all-nums
#+begin_src emacs-lisp
  (defun all-nums (lat)
    (cond
     ((null lat) '())
     (t (cond
         ((numberp (car lat))
          (cons (car lat)
                (all-nums (cdr lat))))
         (t (all-nums (cdr lat)))))))
#+end_src

** eqan?
#+begin_src emacs-lisp
  (defun eqan? (a1 a2)
    (cond
     ((and (numberp a1) (numberp a2))
      (= a1 a2))
     ((or (numberp a1) (numberp a2))
      nil)
     (t (eq a1 a2))))
#+end_src

** occur
#+begin_src emacs-lisp
  (defun occur (a lat)
    (cond
     ((null lat) 0)
     (t (cond
         ((eq (car lat) a)
          (1+ (occur a (cdr lat))))
         (t (occur a (cdr lat)))))))
#+end_src

** one?
#+begin_src emacs-lisp
  (defun one? (n)
    (eq 1 n))
#+end_src

** rempick (using ~one?~)
#+begin_src emacs-lisp
  (defun rempick (n lat)
    (cond
     ((one? n) (cdr lat))
     (t (cons (car lat)
              (rempick (1- n)
                       (cdr lat))))))
#+end_src
